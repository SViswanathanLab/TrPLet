#### env setup
configfile: "./config/config.yaml"
conda_env = config['conda_env']
exportPath = config['export_path']
batchCorrect_script=config["batchCorrect"]

#### Read input samples.tsv
Samples = []
fq1 = []
fq2 = []
file_type = []
lineages = []
input_type = []
with open(config["samples"]) as file:
    for line in file:
        l = line.strip().split(',')
        if len(l) == 6:
            Samples.append(l[0])
            fq1.append(l[1])
            fq2.append(l[2])
            file_type.append(l[3])
            input_type.append(l[4])
            lineages.append(l[5])

# Assume the full sample name is within the fq1 and fq2 file name
# Get the suffix of the seq file name excluding the sample name, used in starAlign.smk
fq1_suffix = fq1[0].replace(Samples[0], "")
fq2_suffix = fq2[0].replace(Samples[0], "")

num_sample = len(Samples) # get number of samples input

# write input lineages information into a text file saved in data folder (prepared as step4 input)
with open ("data/sample_lineageInfo.txt", "w") as f:
    for e in lineages:
        f.write(f"{e}\n")

#### Run rules
# check if the users input bam files or fq files
if all(i == "bam" for i in file_type):
    include: "rules/bam_step1.smk",
    inputs = [
        expand("results/bam_to_fastq/{Sample}/{Sample}_sorted.bam", Sample=Samples),
        expand("results/bam_to_fastq/{Sample}/{Sample}_R1.fastq.gz", Sample=Samples),
        expand("results/bam_to_fastq/{Sample}/{Sample}_R2.fastq.gz", Sample=Samples),
    ]
else:
    include: "rules/fq_step1.smk",
    inputs = []

# check if the users input None-TCGA tumors RNA-seq or Cellline RNA-seq
if all(i == "None-TCGA" for i in input_type):
    include: "rules/tumor_Count.smk",
    include: "rules/step2.smk",
    include: "rules/step3.smk",
    include: "rules/step4.smk",
    include: "rules/step5_to_7.smk",

    inputs_2 = [
        multiext("rsem_ref/gencode_v38", ".chrlist", ".n2g.idx.fa", ".transcripts.fa", ".grp", ".seq", ".idx.fa", ".ti"),
        expand("results/step1/STAR_results/{Sample}/{Sample}_Log.final.out", Sample=Samples),
        expand("results/step1/rsem_results/{Sample}/{Sample}.isoforms.results", Sample=Samples),
        expand("results/step1/rsem_results/{Sample}/{Sample}.genes.results", Sample=Samples),
        "results/step1/isoform_count_matrix.txt",
        "results/step2/merged_with_TCGA11373_counts.tsv.gz",
        "results/step3/batch_corrected_TCGA_counts_with_lineageCOV.tsv.gz",
        "results/step4/genelog2TPMp1_Zscored_batchCorr_with_TCGA_lineageCOV_final_no_NORMALS.tsv.gz",
        "results/step5_to_7/dep_predictions_Zscoredlog2TPMp1_bestMODEL_all_genes_geq0.2.csv",
    ]

else:
    include: "rules/cellline_TPM.smk",
    include: "rules/cellline_step2.smk",
    include: "rules/cellline_step3.smk",

    inputs_2 = [
        multiext("rsem_ref/gencode_v38", ".chrlist", ".n2g.idx.fa", ".transcripts.fa", ".grp", ".seq", ".idx.fa", ".ti"),
        expand("results/step1/STAR_results/{Sample}/{Sample}_Log.final.out", Sample=Samples),
        expand("results/step1/rsem_results/{Sample}/{Sample}.isoforms.results", Sample=Samples),
        expand("results/step1/rsem_results/{Sample}/{Sample}.genes.results", Sample=Samples),
        "results/step1/gene_log2_TPM+1_matrix.txt",
        "results/step2/genelog2TPMp1_Zscored_with_DepMap_Celllines.tsv.gz",
        "results/step3/dep_predictions_Zscoredlog2TPMp1_bestMODEL_all_genes_geq0.2.csv",
    ]

all_inputs = inputs + inputs_2

rule all:
    input:
        all_inputs
